/*
* 3220162 Πετρουλάκης Ιωσήφ 
* 3220202 Τομαράς Νικόλαος
* 3210134 Μπλέτσης Αλέξανδρος
* 3180215 Μεταξάς Κωνσταντίνος
*/


Package minipython;

Helpers
	digit = ['0' .. '9'];
	letter = ['a' .. 'z']|['A' .. 'Z']; 
	cr = 13; 
	lf = 10;
	space = 32;
	dquote = 34;
	squote = 39;
	all = [0..127]; 
	eol = lf | cr | cr lf ;
	not_eol = [all - [cr + lf]]; 
	dot = '.';
	pound = 35;
	underscore = 95;

Tokens
	dott = dot;
	tab = 9;
	plus = '+';
	minus = '-';
	mult = '*';
	dmult = '**';
	div = '/';
	assign = '=';
	exclam = '!';
	percen = '%';
	minus_assign = '-=';
	div_assign = '/=';
	dict = 'dict';
	def = 'def';
	l_par = '(';
	r_par = ')';
	l_br = '[';
	r_br = ']';
	comma = ',';
	qmark = '?';
	gqmark = ';';
	if = 'if';
	elif = 'elif';
	else = 'else';
	while = 'while';
	for = 'for';
	in = 'in';
	print = 'print';
	return = 'return';
	assert = 'assert';
	len = 'len';
	ascii = 'ascii';
	import = 'import';
	as = 'as';
	from = 'from';
	max = 'max';
	min = 'min';
	less = '<';
	great = '>';
	eq = '==';
	lesseq =  '<=';
	greateq = '>=';
	noteq = '!=';
	true = 'true';
	semi = ':';
	false = 'false';
	and = 'and';
	or = 'or';
	not = 'not';
	blank = space | eol;
	none = 'None';
	line_comment = pound not_eol* eol; 
	number = digit+ | (digit+ dot digit+);
	id = (letter | underscore) (letter | digit | underscore)*;
	string = (dquote not_eol* dquote) | (squote not_eol* squote);

Ignored Tokens
	blank, line_comment;



Productions

	p_goal = p_line*;

	p_line = {function} p_function 
			| {statement} p_statement;

	p_function = def id l_par p_argument? r_par semi p_statement;

	p_argument = id p_assign_value?  p_comma_assign_value*;

	p_assign_value = assign p_value;

	p_comma_assign_value = comma id p_assign_value?;

	p_statement = {if} tab* if p_comparison semi p_statement
		| {while} tab* while p_comparison semi p_statement
		| {for} tab* for [for_id]:id in [in_id]:id semi p_statement
		| {return} tab* return p_expression
		| {print} tab* print p_expression p_comma_expression*
		| {assign_op} tab* id p_assign_operators p_expression
		| {assign_array} tab* id l_br [brackets_expression]:p_expression r_br assign [assign_expression]:p_expression
		| {assert} tab* assert p_expression p_comma_expression?
		| {function_call} tab* p_function_call
		| {import} tab* p_import;

	p_assign_operators = {assign} assign 
			| {minus_assign} minus_assign 
			| {div_assign} div_assign;

	p_value = {function_call} p_id_dot p_function_call
			| {number} number 
			| {string} string
			| {none} none;
			
	p_comparison = {comp1} [l_expr]:p_arithmetics p_comparison_operators [r_expr]:p_arithmetics
			| {comp2} true
			| {comp3} false;
	
	p_comparison_operators = {eq} eq
			| {noteq} noteq
			| {less} less
			| {great} great
			| {lesseq} lesseq
			| {greateq} greateq;

	p_comparison_not = {comparison} p_comparison
			| {not} not p_comparison_not;

	p_comparison_and = {comparison_not} p_comparison_not
			| {and} p_comparison_not and p_comparison_and;

	p_comparison_or = {comparison_and} p_comparison_and
			| {or} p_comparison_not or p_comparison_and;

	p_arithmetics = {mult_div_expr} p_mult_div_expr
			| {plus} p_arithmetics plus p_mult_div_expr
			| {minus} p_arithmetics minus p_mult_div_expr;

	p_mult_div_expr = {exp_expr} p_exp_expr
			| {mult} p_mult_div_expr mult p_exp_expr
			| {div} p_mult_div_expr div p_exp_expr;

	p_exp_expr = {expression} p_expression 
			| {exp} p_exp_expr dmult p_expression;
	
	p_expression = {element} p_element
			| {listcall} id l_br p_arithmetics r_br
			| {len} len l_par p_arithmetics r_par
			| {max} max l_par p_arithmetics p_comma_expression* r_par
			| {min} min l_par p_arithmetics p_comma_expression* r_par
			| {list} l_br p_arg_list r_br;

	p_element = {p_value} p_value
			| {id} id
			| {function_call} p_function_call 
			| {pars} l_par p_arithmetics r_par;

	p_function_call = id l_par p_arg_list? r_par;

	p_arg_list = p_arithmetics p_comma_expression*;

	p_comma_expression = comma p_expression;

	p_import = {import} import p_module p_as_id? p_other_modules*
			| {from} from p_module import id p_as_id? p_other_ids*;

	p_module = p_id_dot* id;

	p_as_id = as id;

	p_other_modules = comma p_module p_as_id?;

	p_other_ids = comma id p_as_id?;

	p_id_dot = id dott;	

